# -*-Python-*-

import ddsp
import ddsp.training


# Training dataset and model.
train.data_provider = @data.NSynthTfds()
data.NSynthTfds.split = 'train'
train.model = @models.Autoencoder()

# =======
# Network
# =======

# Preprocessor
models.Autoencoder.preprocessor = @preprocessing.DefaultPreprocessor()
preprocessing.DefaultPreprocessor.time_steps = 1000


# Encoder
models.Autoencoder.encoder = @encoders.MfccTimeDistributedRnnEncoder()
encoders.MfccTimeDistributedRnnEncoder.rnn_channels = 512
encoders.MfccTimeDistributedRnnEncoder.rnn_type = 'gru'
encoders.MfccTimeDistributedRnnEncoder.z_dims = 16
encoders.MfccTimeDistributedRnnEncoder.z_time_steps = 125


# Decoder
models.Autoencoder.decoder = @decoders.ZRnnFcDecoder()
decoders.ZRnnFcDecoder.rnn_channels = 512
decoders.ZRnnFcDecoder.rnn_type = 'gru'
decoders.ZRnnFcDecoder.ch = 512
decoders.ZRnnFcDecoder.layers_per_stack = 3
decoders.ZRnnFcDecoder.append_f0_loudness = True
decoders.ZRnnFcDecoder.output_splits = (('amps', 1),
                                        ('harmonic_distribution', 100),
                                        ('noise_magnitudes', 65))


# =================
# Signal Processors
# =================

# ProcessorGroup
models.Autoencoder.processor_group = @processors.ProcessorGroup()

processors.ProcessorGroup.dag = [
  (@additive/synths.Additive(),
    ['amps', 'harmonic_distribution', 'f0_hz']),
  (@noise/synths.FilteredNoise(),
    ['noise_magnitudes']),
  (@add/processors.Add(),
    ['noise/signal', 'additive/signal']),
]

# Additive Synthesizer
additive/synths.Additive.name = 'additive'
additive/synths.Additive.n_samples = 64000
additive/synths.Additive.sample_rate = 16000
additive/synths.Additive.normalize_below_nyquist = True
additive/synths.Additive.amp_scale_fn = @core.exp_sigmoid

# Filtered Noise Synthesizer
noise/synths.FilteredNoise.name = 'noise'
noise/synths.FilteredNoise.n_samples = 64000
noise/synths.FilteredNoise.window_size = 0
noise/synths.FilteredNoise.amp_scale_fn = @core.exp_sigmoid

# Add
add/processors.Add.name = 'add'


# ======
# Losses
# ======

models.Autoencoder.losses = [
    @losses.SpectralLoss(),
]
losses.SpectralLoss.loss_type = 'L1'
losses.SpectralLoss.mag_weight = 1.0
losses.SpectralLoss.logmag_weight = 1.0
