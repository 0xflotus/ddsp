# -*-Python-*-

import ddsp
import ddsp.training.decoders
import ddsp.training.encoders
import ddsp.training.preprocessing
import ddsp.training.train_util


# Training dataset and model.
data.TFRecordProvider.get_dataset.file_pattern = '/path/to/dataset*.tfrecord'
train.dataset_provider = @data.SoloInstrument()
train.model = @model.Model()

# =======
# Network
# =======

# Preprocessor
model.Model.preprocessor = @preprocessing.DefaultPreprocessor()
preprocessing.DefaultPreprocessor.time_steps = 1000

# Encoder
model.Model.encoder = None

# Decoder
model.Model.decoder = @decoders.RnnFcDecoder()
decoders.RnnFcDecoder.n_out = 126
decoders.RnnFcDecoder.rnn_channels = 512
decoders.RnnFcDecoder.rnn_type = 'gru'
decoders.RnnFcDecoder.ch = 512
decoders.RnnFcDecoder.layers_per_stack = 3


# =================
# Signal Processors
# =================

# ProcessorGroup
model.Model.processor_group = @processors.ProcessorGroup()

processors.ProcessorGroup.dag = [
  (@split/processors.Split(),
    ['decoder_outputs']),
  (@additive/synths.Additive(),
    ['split/signal/to_amp', 'split/signal/to_harm', 'f0_hz']),
  (@noise/synths.FilteredNoise(),
    ['split/signal/to_noise']),
  (@add/processors.Add(),
    ['noise/signal', 'additive/signal']),
  (@reverb/effects.FixedReverb(),
    ['add/signal']),
  (@add2/processors.Add(),
    ['add/signal', 'reverb/signal']),
]

# Split
split/processors.Split.name = 'split'
split/processors.Split.splits = (('to_amp', 1), ('to_harm', 60), ('to_noise', 65))

# Additive Synthesizer
additive/synths.Additive.name = 'additive'
additive/synths.Additive.n_samples = 64000
additive/synths.Additive.sample_rate = 16000
additive/synths.Additive.normalize_below_nyquist = True
additive/synths.Additive.amp_scale_fn = @core.exp_sigmoid

# Filtered Noise Synthesizer
noise/synths.FilteredNoise.name = 'noise'
noise/synths.FilteredNoise.n_samples = 64000
noise/synths.FilteredNoise.window_size = 0
noise/synths.FilteredNoise.amp_scale_fn = @core.exp_sigmoid

# Add
add/processors.Add.name = 'add'

# Reverb
reverb/effects.FixedReverb.name = 'reverb'
reverb/effects.FixedReverb.reverb_length = 64000

# Add2
add2/processors.Add.name = 'add2'


# ======
# Losses
# ======

model.Model.losses = [
    @losses.SpectralLoss(),
]
losses.SpectralLoss.loss_type = 'L1'
losses.SpectralLoss.mag_weight = 1.0
losses.SpectralLoss.logmag_weight = 1.0
